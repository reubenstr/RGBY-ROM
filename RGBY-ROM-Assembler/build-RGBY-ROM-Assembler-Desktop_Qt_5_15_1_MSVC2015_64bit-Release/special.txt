// instruction opcodes generated by RGBY-ROM Assembler
`define OPCODE_MOV 4'h0
`define OPCODE_AND 4'h1
`define OPCODE_OR 4'h2
`define OPCODE_XOR 4'h3
`define OPCODE_SLT 4'h4
`define OPCODE_ADD 4'h5
`define OPCODE_ADDS 4'h6
`define OPCODE_SUB 4'h7
`define OPCODE_SUBS 4'h8
`define OPCODE_EQ 4'h9
`define OPCODE_SHIFT 4'hA
`define OPCODE_LI 4'hB
`define OPCODE_DELAY 4'hC
`define OPCODE_BOS 4'hD
`define OPCODE_BNS 4'hE
`define OPCODE_J 4'hF


// registers generated by RGBY-ROM Assembler
`define REG_ZERO 4'h0
`define REG_ONE 4'h1
`define REG_RAND 4'h2
`define REG_RESULT 4'h3
`define REG_IMM 4'h4
`define REG_RED 4'h5
`define REG_GREEN 4'h6
`define REG_BLUE 4'h7
`define REG_PORTOUT 4'h8
`define REG_PORTIN 4'h9
`define REG_INDEX 4'hA
`define REG_SPEED 4'hB
`define REG_PHASE 4'hC
`define REG_MODE 4'hD
`define REG_GENA 4'hE
`define REG_GENB 4'hF



module ramHardcoded (din, addr, write_en, clk, dout);
parameter addr_width = 8;
 parameter data_width = 12;
 input [addr_width-1:0] addr;
  input [data_width-1:0] din;
  input write_en, clk;
   output [data_width-1:0] dout;
   reg [data_width-1:0] mem [(1<<addr_width)-1:0];
   // Define RAM as an indexed memory array.
   always @(posedge clk) // Control with a clock edge.
     begin
       if (write_en) begin// And control with a write enable.
         mem[(addr)] <= din;
     end
     end
assign dout = 
 (addr == 0) ? 12'h991 :
 (addr == 1) ? 12'hE07 :
 (addr == 2) ? 12'h6D1 :
 (addr == 3) ? 12'hB03 :
 (addr == 4) ? 12'h9D4 :
 (addr == 5) ? 12'hE07 :
 (addr == 6) ? 12'h0B0 :
 (addr == 7) ? 12'hC64 :
 (addr == 8) ? 12'hF10 :
 (addr == 9) ? 12'h9D0 :
 (addr == 10) ? 12'hD10 :
 (addr == 11) ? 12'h9D1 :
 (addr == 12) ? 12'hD22 :
 (addr == 13) ? 12'hB02 :
 (addr == 14) ? 12'h9D4 :
 (addr == 15) ? 12'hD25 :
 (addr == 16) ? 12'h6A1 :
 (addr == 17) ? 12'hB08 :
 (addr == 18) ? 12'hE14 :
 (addr == 19) ? 12'h0A0 :
 (addr == 20) ? 12'h9C0 :
 (addr == 21) ? 12'hD18 :
 (addr == 22) ? 12'h0C0 :
 (addr == 23) ? 12'hF19 :
 (addr == 24) ? 12'h0C1 :
 (addr == 25) ? 12'h0EA :
 (addr == 26) ? 12'h9C1 :
 (addr == 27) ? 12'hE1f :
 (addr == 28) ? 12'hB07 :
 (addr == 29) ? 12'h74E :
 (addr == 30) ? 12'h03E :
 (addr == 31) ? 12'hA1E :
 (addr == 32) ? 12'h083 :
 (addr == 33) ? 12'hF00 :
 (addr == 34) ? 12'h6A1 :
 (addr == 35) ? 12'h08A :
 (addr == 36) ? 12'hF00 :
 (addr == 37) ? 12'h082 :
 (addr == 38) ? 12'hF00 :
 (addr == 39) ? 12'h000 :
 (addr == 40) ? 12'h0 :
	0;
endmodule
